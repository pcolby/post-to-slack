# SPDX-FileCopyrightText: 2022-2023 Paul Colby <git@colby.id.au>
# SPDX-License-Identifier: MIT

name: Post to Slack

author: Paul Colby

description: Post a message via a Slack Incoming WebHook

inputs:
  url:
    description: Slack Incoming Webhook URL
    required: true
  text:
    description: Text of the message to post to Slack
    required: true
  channel:
    description: '#channel or @username to post to'
    required: false
  iconEmoji:
    description: 'Slack emoji :shortcode: to post with'
    required: false
  iconUrl:
    description: 'URL for an icon to post with'
    required: false
  username:
    description: Name to post from
    required: false
  attachments:
    description: List of attachments in JSON, serialised to a string
    required: false
  dryRun:
    description: 'If true, do everything *but* post to Slack'
    required: true
    default: false

outputs:
  request:
    description: JSON request payload that was POSTed to Slack
    value: ${{ steps.poster.outputs.request }}
  response:
    description: Content included in Slack's reponse
    value: ${{ steps.poster.outputs.response }}

runs:
  using: composite
  steps:
    - run: |
        set -o errexit -o noclobber -o nounset -o pipefail

        # Encode inputs as JSON strings, including surrounding quotes.
        [[ -z "$INPUT_TEXT"        ]] || text=$(     jq --exit-status --raw-input --slurp 'rtrimstr("\n")' <<< "${INPUT_TEXT//\\n/$'\n'}")
        [[ -z "$INPUT_USERNAME"    ]] || username=$( jq --exit-status --raw-input --slurp 'rtrimstr("\n")' <<< "$INPUT_USERNAME"  )
        [[ -z "$INPUT_ICON_EMOJI"  ]] || iconEmoji=$(jq --exit-status --raw-input --slurp 'rtrimstr("\n")' <<< "$INPUT_ICON_EMOJI")
        [[ -z "$INPUT_ICON_URL"    ]] || iconUrl=$(  jq --exit-status --raw-input --slurp 'rtrimstr("\n")' <<< "$INPUT_ICON_URL"  )
        [[ -z "$INPUT_CHANNEL"     ]] || channel=$(  jq --exit-status --raw-input --slurp 'rtrimstr("\n")' <<< "$INPUT_CHANNEL"   )
        [[ -z "$INPUT_ATTACHMENTS" ]] || attachments="$INPUT_ATTACHMENTS"

        # Build the JSON payload. Note, we use `printf` here to workaround a bug in Bash pre-5.1 that causes:
        # "backslashes quoting double quotes in here document bodies to not be removed when expanding the body".
        # Note also, we use compact-output so that the `$GITHUB_OUTPUT` below won't truncate at the first
        # new line character; but otherwise we could use pretty-printing here if we wanted to.
        json="$(jq --compact-output --exit-status --sort-keys . <<--
        {
          ${channel:+$(    printf '%s' '"channel"'    ): $channel,}
          ${iconEmoji:+$(  printf '%s' '"icon_emoji"' ): $iconEmoji,}
          ${iconUrl:+$(    printf '%s' '"icon_url"'   ): $iconUrl,}
          ${username:+$(   printf '%s' '"username"'   ): $username,}
          ${attachments:+$(printf '%s' '"attachments"'): $attachments,}
          "text": $text
        }
        -
        )";

        # Note, we give the URL to curl as a config file on stdin to avoid any chance
        # of exposing the sensitive URL to other processes on the host.
        [[ "$INPUT_DRY_RUN" == 'true' ]] || response=$(curl --no-progress-meter --request POST --data "payload=$json" --config - <<< "url=$INPUT_URL")
        echo "Reponse: ${response:-(none)}"
        echo "request=$json" >> "$GITHUB_OUTPUT"
        echo "response=${response:-}" >> "$GITHUB_OUTPUT"
      shell: bash
      env:
        INPUT_URL: ${{         inputs.url         }}
        INPUT_TEXT: ${{        inputs.text        }}
        INPUT_CHANNEL: ${{     inputs.channel     }}
        INPUT_ICON_EMOJI: ${{  inputs.iconEmoji   }}
        INPUT_ICON_URL: ${{    inputs.iconUrl     }}
        INPUT_USERNAME: ${{    inputs.username    }}
        INPUT_ATTACHMENTS: ${{ inputs.attachments }}
        INPUT_DRY_RUN: ${{     inputs.dryRun      }}
      id: poster

branding:
  color: blue
  icon: message-square
